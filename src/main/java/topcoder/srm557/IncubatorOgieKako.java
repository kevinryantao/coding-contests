package topcoder.srm557;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class IncubatorOgieKako {
    public int maxMagicalGirls(String[] love) {
        int n = love.length;
        boolean[][] myLoveGraph = new boolean[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < love[i].length(); j++) {
                myLoveGraph[i][j] = love[i].charAt(j) == 'Y';
            }
        }
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    myLoveGraph[i][j] |= myLoveGraph[i][k] && myLoveGraph[k][j];
                }
            }
        }
        int m = 0;
        int[] is = new int[n];
        Arrays.fill(is,
                    - 1);
        for (int i = 0; i < n; i++) {
            if (! myLoveGraph[i][i]) {
                is[i] = m++;
            }
        }

        // this part translates the graph to a new graph, which does not contain any self-pointing girls
        boolean[][] myGraph2 = new boolean[m][m];
        for (int i = 0; i < n; i++) {
            if (! myLoveGraph[i][i]) {
                for (int j = 0; j < n; j++) {
                    if (! myLoveGraph[j][j]) {
                        myGraph2[is[i]][is[j]] = myLoveGraph[i][j];
                    }
                }
            }
        }
        // m is the max possible.
        // bipartite matching finds how many points are grouped together
        return m - GraphAlgorithms.bipartiteMatching(myGraph2);
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++ i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}");
        System.out.println("]");
        IncubatorOgieKako obj;
        int answer;
        obj = new IncubatorOgieKako();
        long startTime = System.currentTimeMillis();
        answer = obj.maxMagicalGirls(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p1);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p1;
        }
        if (! res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }

    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String[] p0;
        int p1;

        // ----- test 0 -----
        p0 = new String[]{"NY", "NN"};
        p1 = 1;
        all_right = KawigiEdit_RunTest(0,
                                       p0,
                                       true,
                                       p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new String[]{"NYN", "NNY", "NNN"};
        p1 = 1;
        all_right = KawigiEdit_RunTest(1,
                                       p0,
                                       true,
                                       p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new String[]{"NNYNN", "NNYNN", "NNNYY", "NNNNN", "NNNNN"};
        p1 = 2;
        all_right = KawigiEdit_RunTest(2,
                                       p0,
                                       true,
                                       p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new String[]{"NNNNN", "NYNNN", "NYNYN", "YNYNN", "NNNNN"};
        p1 = 2;
        all_right = KawigiEdit_RunTest(3,
                                       p0,
                                       true,
                                       p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new String[]{"NNNNN", "NNNNN", "NNNNN", "NNNNN", "NNNNN"};
        p1 = 5;
        all_right = KawigiEdit_RunTest(4,
                                       p0,
                                       true,
                                       p1) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = new String[]{"NNYNNNNN", "NNNYNNNN", "NNNNYNNN", "NNYNNNNN", "NNNNNYYN", "NNNYNNNY", "NNNNNNNN",
                "NNNNNNNN"};
        p1 = 2;
        all_right = KawigiEdit_RunTest(5,
                                       p0,
                                       true,
                                       p1) && all_right;
        // ------------------

        // ----- test 6 -----
        p0 = new String[]{"Y"};
        p1 = 0;
        all_right = KawigiEdit_RunTest(6,
                                       p0,
                                       true,
                                       p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}


class GraphAlgorithms {

    public static int bipartiteMatching(boolean[][] myBipartiteGraph) {
        int n = myBipartiteGraph.length;
        if(n==0)return 0;
        int m = myBipartiteGraph[0].length;
        int[] match = new int[m];
        Arrays.fill(match,
                    -1);
        int res = 0;
        for (int i = 0; i < n; i++) {
            boolean[] visited = new boolean[m];
            if (go(i,
                   myBipartiteGraph,
                   visited,
                   match))
                res++;
        }
        // the count is how many independent groups there are.
        return res;
    }

    private static boolean go(int v, boolean[][] graph, boolean[] visited, int[] lovedBy) {
        int m = graph[0].length;
        // for every girl(i)
        for (int i = 0; i < m; i++) {
            // if girl(i) not yet visited, girl(v) loves girl(i), girl(i) unloved
            if (! visited[i] && graph[v][i] && lovedBy[i] == - 1) {
                // then visited = true, girl(i)'s is loved by girl(v)
                visited[i] = true;
                lovedBy[i] = v;
                return true;
            }
        }
        // since it got here, that means that for all the i's,
        // it's either been visited or girl(v) doesn't love girl(i) or girl(i) is loved

        // for every girl(i)
        for (int i = 0; i < m; i++) {
            // if girl(i) is not yet visited, and girl(v) loves girl(i)
            if (! visited[i] && graph[v][i]) {
                // visit girl(i)
                visited[i] = true;
                // recursively call go. with the change being that instead of "v" it's now going to i.
                if (go(lovedBy[i],
                       graph,
                       visited,
                       lovedBy)) {
                    lovedBy[i] = v;
                    return true;
                }
            }
        }
        return false;
    }
}

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!