package topcoder.srm642;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class WaitingForBus
{
    public double whenWillBusArrive(int[] time, int[] prob, int josephArrivalTime)
    {
        //step 1. find out the probability of all the possible combinations leading up to time s
        int maxTime = 0;
        for(int t : time){
            if(t > maxTime){
                maxTime = t;
            }
        }

        double[] probabilityPercentage = new double[prob.length];
        for(int i = 0; i < prob.length; i++){
            probabilityPercentage[i] = prob[i] / 100.0;
        }

        double[] probabilityOfBusArrivingAtTime = new double[josephArrivalTime + 1];
        probabilityOfBusArrivingAtTime[0] = 1; //initialize time 0 with 100%

        for(int t = 1; t < probabilityOfBusArrivingAtTime.length; t++){
            double probabilityOfBusArrivingAtTimeT = 0;
            for(int i = 0; i < time.length; i++){
                if(t-time[i] >= 0){
                    probabilityOfBusArrivingAtTimeT += probabilityOfBusArrivingAtTime[t-time[i]] * probabilityPercentage[i];
                }
            }
            probabilityOfBusArrivingAtTime[t] = probabilityOfBusArrivingAtTimeT;
        }

        double[] probabilityOfBusArrivingAfterJoseph = new double[maxTime];
        for(int t = 1; t < probabilityOfBusArrivingAfterJoseph.length; t++){
            double totalProbability = 0;
            for(int i = 0; i < time.length; i++){
                int lastBus = josephArrivalTime + t - time[i];
                if(time[i] > t && lastBus >=0){
                    totalProbability += probabilityOfBusArrivingAtTime[lastBus] * probabilityPercentage[i];
                }
            }
            probabilityOfBusArrivingAfterJoseph[t] = totalProbability;
        }

        double totalWeightedWaitTime = 0;
        for(int t = 1; t < probabilityOfBusArrivingAfterJoseph.length; t++){
            totalWeightedWaitTime += t * probabilityOfBusArrivingAfterJoseph[t];
        }
        return totalWeightedWaitTime;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, int p2, boolean hasAnswer, double p3) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p0[i]);
        }
        System.out.print("}" + "," + "{");
        for (int i = 0; p1.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(p1[i]);
        }
        System.out.print("}" + "," + p2);
        System.out.println("]");
        WaitingForBus obj;
        double answer;
        obj = new WaitingForBus();
        long startTime = System.currentTimeMillis();
        answer = obj.whenWillBusArrive(p0, p1, p2);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p3);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = Math.abs(p3 - answer) <= 1e-9 * Math.max(1.0, Math.abs(p3));
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        int[] p0;
        int[] p1;
        int p2;
        double p3;

        // ----- test 0 -----
        p0 = new int[]{5,100};
        p1 = new int[]{90,10};
        p2 = 5;
        p3 = 9.5D;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new int[]{5};
        p1 = new int[]{100};
        p2 = 101;
        p3 = 4.0D;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new int[]{5,10};
        p1 = new int[]{50,50};
        p2 = 88888;
        p3 = 3.666666666666667D;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new int[]{1,2,3,4};
        p1 = new int[]{10,20,30,40};
        p2 = 1000;
        p3 = 1.166666666666667D;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new int[]{10,100,1000,10000,100000};
        p1 = new int[]{90,4,3,2,1};
        p2 = 100000;
        p3 = 21148.147303578935D;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------


        // ----- test 5 -----
        p0 = new int[100];
        for(int i = 0; i < 100; i++){
            p0[i] = i+1;
        }
        p1 = new int[100];
        for(int i = 0; i < 100; i++){
            p1[i] = 1;
        }
        p2 = 100000;
        p3 = 21148.147303578935D;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!