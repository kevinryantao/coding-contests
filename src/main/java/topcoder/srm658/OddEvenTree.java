package topcoder.srm658;

import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class OddEvenTree
{
    public int[] getTree(String[] x)
    {
        Set<Integer> evenList = new HashSet<Integer>();
        Set<Integer> oddList = new HashSet<Integer>();

        evenList.add(0);

        int length = x.length;
        for(int i = 0; i < length; i++){
            if(x[i].charAt(i) == 'O'){
                return new int[]{-1};
            }
        }

        for(int i = 1; i < length; i++){
            if(x[0].charAt(i) == 'O'){
                oddList.add(i);
            }
            if(x[0].charAt(i) == 'E'){
                evenList.add(i);
            }
        }

        for(int i = 1; i < length; i++){
            for(int j = 0; j < length; j++){
                if(evenList.contains(i) && evenList.contains(j) || oddList.contains(i) && oddList.contains(j)){
                    if(x[i].charAt(j) == 'O'){
                        return new int[]{-1};
                    }
                }
                else if(evenList.contains(i) && oddList.contains(j) || oddList.contains(i) && evenList.contains(j)){
                    if(x[i].charAt(j) == 'E'){
                        return new int[]{-1};
                    }
                }
            }
        }

        evenList.remove(0);

        List<Integer> resultList = new ArrayList<Integer>();
        int oddInt = -1;
        for(int i : oddList){
            resultList.add(0);
            resultList.add(i);
            oddInt = i;
        }

        for(int i : evenList){
            resultList.add(oddInt);
            resultList.add(i);
        }

        int[] intResults = new int[resultList.size()];
        for(int i = 0; i < resultList.size(); i++){
            intResults[i] = resultList.get(i);
        }

        return intResults;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int[] p1) {
        System.out.print("Test " + testNum + ": [" + "{");
        for (int i = 0; p0.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print("\"" + p0[i] + "\"");
        }
        System.out.print("}");
        System.out.println("]");
        OddEvenTree obj;
        int[] answer;
        obj = new OddEvenTree();
        long startTime = System.currentTimeMillis();
        answer = obj.getTree(p0);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.print("\t" + "{");
            for (int i = 0; p1.length > i; ++i) {
                if (i > 0) {
                    System.out.print(",");
                }
                System.out.print(p1[i]);
            }
            System.out.println("}");
        }
        System.out.println("Your answer:");
        System.out.print("\t" + "{");
        for (int i = 0; answer.length > i; ++i) {
            if (i > 0) {
                System.out.print(",");
            }
            System.out.print(answer[i]);
        }
        System.out.println("}");
        if (hasAnswer) {
            if (answer.length != p1.length) {
                res = false;
            } else {
                for (int i = 0; answer.length > i; ++i) {
                    if (answer[i] != p1[i]) {
                        res = false;
                    }
                }
            }
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String[] p0;
        int[] p1;

        // ----- test 0 -----
        p0 = new String[]{"EOE","OEO","EOE"};
        p1 = new int[]{0,1,2,1};
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = new String[]{"EO","OE"};
        p1 = new int[]{0,1};
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = new String[]{"OO","OE"};
        p1 = new int[]{-1};
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------

        // ----- test 3 -----
        p0 = new String[]{"EO","EE"};
        p1 = new int[]{-1};
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = new String[]{"EOEO","OEOE","EOEO","OEOE"};
        p1 = new int[]{0,1,0,3,2,1};
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!