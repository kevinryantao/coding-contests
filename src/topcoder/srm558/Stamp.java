package topcoder.srm558;

import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class Stamp
{
    public int getMinimumCost(String desiredColor, int stampCost, int pushCost)
    {
        int minContiguous = getMinContiguous(desiredColor);
        int runningMinCost = Integer.MAX_VALUE;
        for(int length = 1; length <= minContiguous; length++){
            int myCost = getCostWithLength(desiredColor, stampCost, pushCost, length);
            if(myCost < runningMinCost){
                runningMinCost = myCost;
            }
        }
        return runningMinCost;
    }

    public int getCostWithLength(String desiredColor, int stampCost, int pushCost, int length){
        char[] myChars = desiredColor.toCharArray();
        int stampTotal = stampCost * length;
        int numberOfPushes = 0;
        char myLastColor = 'Z';
        int numberOfPrevTrailingStars = 0;
        int numberOfTrailingStars = 0;
        for(int i = 0; i < myChars.length; i++){
            char myColor = 'A';
            int endIndex = i + length - 1;
            for(int j = i; j < i + length; j++){
                if(j >= myChars.length){
                    // reached end of string
                    if(myLastColor != myColor && numberOfPrevTrailingStars + j - i < length){
                        return Integer.MAX_VALUE; // impossible
                    } else{
                        break;
                    }
                }
                char myChar = myChars[j];
                if(myChar == '*'){
                    numberOfTrailingStars++;
                    continue;
                }
                if(myColor == 'A'){
                    myColor = myChar;
                } else if(myColor != myChar){
                    endIndex = j - 1; //diff color. stop.
                    if(myLastColor != myColor && numberOfPrevTrailingStars + j - i < length){
                        return Integer.MAX_VALUE; // impossible
                    } else{
                        break;
                    }
                }
                numberOfTrailingStars = 0;
            }
            i = endIndex;
            numberOfPushes++;
            myLastColor = myColor;
            numberOfPrevTrailingStars = numberOfTrailingStars;
            numberOfTrailingStars = 0;
        }
        return stampTotal + numberOfPushes *pushCost;
    }

    public int getMinContiguous(String desiredColor){
        int myRunningMin = desiredColor.length();
        char myLastColor = 'A';
        int myCurrentSegmentLength = Integer.MAX_VALUE;
        int myNumberOfStars = 0;
        for(int i = 0; i < desiredColor.length(); i++){
            char myChar = desiredColor.charAt(i);
            if(myChar == '*'){
                myNumberOfStars ++;
                myCurrentSegmentLength++;
            } else if(myChar == myLastColor){ // same color
                myNumberOfStars = 0;
                myCurrentSegmentLength ++;
            } else { //new color
                if(myCurrentSegmentLength < myRunningMin){
                    myRunningMin = myCurrentSegmentLength;
                }
                myCurrentSegmentLength = myNumberOfStars + 1; // stars get to add to this one
                myLastColor = myChar;
                myNumberOfStars = 0;
            }
        }
        if(myCurrentSegmentLength < myRunningMin){
            myRunningMin = myCurrentSegmentLength;
        }
        return myRunningMin;
    }

    // BEGIN KAWIGIEDIT TESTING
    // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
    private static boolean KawigiEdit_RunTest(int testNum, String p0, int p1, int p2, boolean hasAnswer, int p3) {
        System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + p1 + "," + p2);
        System.out.println("]");
        Stamp obj;
        int answer;
        obj = new Stamp();
        long startTime = System.currentTimeMillis();
        answer = obj.getMinimumCost(p0, p1, p2);
        long endTime = System.currentTimeMillis();
        boolean res;
        res = true;
        System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
        if (hasAnswer) {
            System.out.println("Desired answer:");
            System.out.println("\t" + p3);
        }
        System.out.println("Your answer:");
        System.out.println("\t" + answer);
        if (hasAnswer) {
            res = answer == p3;
        }
        if (!res) {
            System.out.println("DOESN'T MATCH!!!!");
        } else if ((endTime - startTime) / 1000.0 >= 2) {
            System.out.println("FAIL the timeout");
            res = false;
        } else if (hasAnswer) {
            System.out.println("Match :-)");
        } else {
            System.out.println("OK, but is it right?");
        }
        System.out.println("");
        return res;
    }
    public static void main(String[] args) {
        boolean all_right;
        all_right = true;

        String p0;
        int p1;
        int p2;
        int p3;

        /*
        // ----- test 0 -----
        p0 = "RRGGBB";
        p1 = 1;
        p2 = 1;
        p3 = 5;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 1 -----
        p0 = "R**GB*";
        p1 = 1;
        p2 = 1;
        p3 = 5;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 2 -----
        p0 = "BRRB";
        p1 = 2;
        p2 = 7;
        p3 = 30;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
        */
        // ----- test 3 -----
        p0 = "R*RR*GG";
        p1 = 10;
        p2 = 58;
        p3 = 204;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 4 -----
        p0 = "*B**B**B*BB*G*BBB**B**B*";
        p1 = 5;
        p2 = 2;
        p3 = 33;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------

        // ----- test 5 -----
        p0 = "*R*RG*G*GR*RGG*G*GGR***RR*GG";
        p1 = 7;
        p2 = 1;
        p3 = 30;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------

        if (all_right) {
            System.out.println("You're a stud (at least on the example cases)!");
        } else {
            System.out.println("Some of the test cases had errors.");
        }
    }
    // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!